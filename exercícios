//EXERCÍCIO 01
package main

import "fmt"

// Crie uma função que receba um slice de inteiros e retorne a média aritmética dos valores.

func media(num []int, tamanho int) int {
	var i, r, x int

	for i = 0; i < len(num); i++ {
		x += num[i]
	}
	r = x / tamanho
	return r
}

func main() {
	num := []int{10, 10, 10, 10, 10}
	resultado := media(num, len(num))
	fmt.Println("A média aritimética será:", resultado)
}
//////////////////////////////////////////////////////////////////////////////////////////////////
//EXERCÍCIO 02
package main

import (
	"bufio"
	"fmt"
	"os"
)

// Crie uma função que receba uma string e retorne a quantidade de vogais presentes.
func v(frase string) int {
	var k int
	for i := 0; i < len(frase); i++ {
		if frase[i] == 'a' || frase[i] == 'e' || frase[i] == 'i' || frase[i] == 'o' || frase[i] == 'u' {

			k++
		}
	}
	return k
}

func main() {
	newScanner := bufio.NewScanner(os.Stdin)
	fmt.Println("Digite uma frase")
	newScanner.Scan()
	frase := newScanner.Text()
	resultado := v(frase)
	fmt.Printf("A frase %s tem %d vogais", frase, resultado)

}

//////////////////////////////////////////////////////////////////////////////////////////////////
EXERCÍCIO 03
package main

import "fmt"

//Crie uma função que receba um slice de strings e retorne a concatenação de todas as strings.

func conc(frase []string, frase2 string) string {
	for i := 0; i < len(frase); i++ {
		frase2 += frase[i]
	}
	return frase2
}

func main() {
	var frase2, resultado, x string
	var frase []string
	for i := 0; i < 10; i++ {
		fmt.Println("Digite uma palavra")
		fmt.Scan(&x)
		frase = append(frase, x)

	}
	resultado = conc(frase, frase2)
	fmt.Println("A concatenação das suas palvras ficará", resultado)
}
//////////////////////////////////////////////////////////////////////////////////////////////////
EXERCÍCIO 04
package main

import "fmt"

//Crie uma função que receba um slice de inteiros e retorne o segundo maior valor.

func maiorvalor(num []int) int {
	var x, y int
	for i := 0; i < len(num)-1; i++ {
		if num[i+1] > num[i] {
			x = num[i+1]
		}
	}
	for i := 0; i < len(num); i++ {
		if num[i] < x && num[i+1] > num[i] {
			y = num[i]
		}
	}
	return y
}

func main() {
	var x = []int{1, 2, 3, 4, 5, 6, 7, 8}
	result := maiorvalor(x)
	fmt.Println(result)
}
//////////////////////////////////////////////////////////////////////////////////////////////////
EXERCÍCIO 05
package main

import "fmt"

//Crie uma função que receba um slice de inteiros e um valor inteiro
//retorne a posição do primeiro elemento igual ao valor no slice.
//Caso não encontre, retorne -1.

func sliceint(num []int, x int) (int, error) {
	var y int
	if x < 0 && x > len(num) {
		return 0, fmt.Errorf("-1")
	}
	num = append(num[x-1:], num[:x]...)
	for i := 0; i < 1; i++ {
		y = num[i]
	}

	return y, nil
}

func main() {
	var num = []int{1, 2, 9, 4, 5, 6, 7}
	x := 3
	result, err := sliceint(num, x)
	if err != nil {
		fmt.Println(err)
		return
	} else {
		fmt.Println(result)
	}

}
//////////////////////////////////////////////////////////////////////////////////////////////////
EXERCÍCIO 06
package main

import (
	"fmt"
)

//Escreva uma função que receba um slice de strings como parâmetro
//retorne uma string com todas as strings concatenadas e separadas por vírgulas.
//Caso o slice esteja vazio, retorne um erro.

func conca(s []string) (string, error) {
	var frase string
	for i := 0; i < len(s); i++ {
		frase += s[i] + ","

	}
	if s == nil {
		fmt.Errorf("erro")
	}
	return frase, nil
}

func main() {
	var s = []string{"a", "b", "c", "d"}
	frase, err := conca(s)
	if err != nil {
		fmt.Println(err)
	} else {
		fmt.Println(frase)
	}
}
